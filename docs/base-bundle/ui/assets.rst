Assets
======

The interface depends on various scss styles, themes, vue components,
and other javascript files.
These assets come from many bundles (not just the base bundle) and
need to be built with a module bundler such as webpack.

Each application is responsible for finding the assets provided by each bundle, combining them together, and generating optimized css and javascript files.

Fortunately, you don't have to create this build pipeline yourself (unless you want to).
Perform comes with tools to create it for you.

Creating a build pipeline
-------------------------

.. note::

   The dev bundle is used to generate this configuration.
   See the :doc:`dev-bundle/index.rst` for more information.


Run the following command to create a new asset pipeline:

.. code-block:: bash

    ./bin/console perform-dev:assets:init

Your application directory will now contain the following files:

.. code-block:: bash

    /my-app/
    ├── node_modules/     # installed with npm or yarn
    ├── src/              # application asset sources
    ├── vendor/           # perform asset sources
    ├── web/              # destination of built asset files
    ├── asset-paths.js    # auto-generated file containing all namespaces and entrypoints for the build tool
    ├── .babelrc          # javascript compilation configuration
    ├── package.json      # required dependencies across all bundles
    ├── webpack.config.js # build tool configuration (webpack)
    └── yarn.lock         # optional lock file for tracking exact node_modules/ versions

In summary: webpack builds asset sources from ``src/``, ``vendor/``, and ``node_modules/``, using ``asset-paths.js`` to resolve paths and entrypoints, and places them in ``web/``.

You should commit most of these files to version control, excluding ``vendor/`` (composer packages), ``node_modules/`` (npm packages), and ``asset-paths.js`` (generated by Perform automatically).

To build the assets, clear the cache and run webpack:

.. code-block:: bash

   ./bin/console cache:clear # generates asset-paths.js
   npm install               # or use yarn
   npm run build             # runs webpack, task defined in package.json

Assets paths
------------

What is ``asset-paths.js``, and why does it need to be generated?

Perform keeps a record of asset namespaces (``alias.resolve`` in webpack terminology) and entrypoints (asset files to build).

Bundles can register namespaces and endpoints, so the contents of ``asset-paths.js`` changes depending on the bundles and features installed.

The base bundle registers the ``perform-base`` namespace and ``perform.scss`` and ``perform.js`` entrypoints.
Other bundles such as the media and rich-content bundles register new namespaces and entrypoints too.

Your application can also define new endpoints in the application configuration:

.. code-block:: yaml

    perform_base:
        assets:
            namespaces:
                'my-app': '%kernel.project_dir%/src/AppBundle/Resources'
            entrypoints:
                'my-app': 'my-app/js/app.js'

When the assets are built, these extra entrypoints will be added to ``asset-paths.js`` and used by webpack.

Including extra sass files
--------------------------

``perform.scss`` can include extra scss files for styling your own markup and tweaking existing styles.

To include the file ``src/AppBundle/Resources/scss/_extras.scss`` in the build:

.. code-block:: yaml

    perform_base:
        assets:
            namespaces:
                'my-app': '%kernel.project_dir%/src/AppBundle/Resources'
            extra_sass:
                - 'my-app/scss/_extras'

.. note::

   If you're looking to change the entire look and feel of the interface, create a :doc:`theme <./themes>`.

Understanding javascript
------------------------

Perform is slightly unconventional in that it (usually) builds a single javascript file for the application, but is designed to NOT be a single page application.

The different javascript features are then 'activated' by calling various methods on a global ``window.Perform`` object when required.

For example, the media file selector will be contained in ``perform.js``, but will only be activated when the ``window.Perform.media.selectFiles()`` method is called.

.. note::

   You can still import various javascript dependencies from any place in the application, without referring to the ``window.Perform`` object.


Adding a javascript module
--------------------------

``perform.js`` can import javascript files, and attach the exported functions to the ``window.Perform`` object.

To include the file ``src/AppBundle/Resources/js/functions.js`` under the ``window.Perform.myApp`` property:

.. code-block:: yaml

    perform_base:
        assets:
            namespaces:
                'my-app': '%kernel.project_dir%/src/AppBundle/Resources'
            js_modules:
                'myApp': 'my-app/js/functions.js'

Understanding entrypoints
-------------------------

If you're using the Perform interface for the whole of your application, you won't need to create any extra entrypoints.
Simply add extra sass and javascript modules as required, and ``perform.css`` and ``perform.js`` will contain everything your application requires.

Things change slightly when you aren't using the Perform interface on certain pages, but want to include certain Perform features on them.

For example, you might have a page with your own template and styles, but want to include the media bundle's file selector into it.
Including the whole of ``perform.css`` and ``perform.js`` in your page will cause problems; overriding existing styles and functionality on your page.

In this case, it's better to create a new entrypoint with just the file selector code, that is *namespaced* -  preventing it from interfering with anything else on the page.

Css namespacing
~~~~~~~~~~~~~~~

p--local
